A METTRE DANS L’AUTRE FICHIER
if dé1 = dé2
	jouable x2

def Déplacement_possible(dé,i, camp) :
	if Echi[i+dé] ≥  camp  & i+dé =< 24:
		 return 1
	else :
		return 0

2EME FONCTION JOUABLE/////////////////////////////
def Jouable2eme(dé, CP)
	CP =[ ]
	if pion mort ≥ 1 
		i = 1
		a = Déplacement_possible(dé,i)
		if a == 1
			CP = CP + ( i, i+dé )                (case de départ, casé d’arrivé) 
	else : 

	for i in range (1,25) :            // 24valeurs
		if Echi[i+] > 0 :
			a = Déplacement_possible(dé1,i)
			if a == 1
				CP = CP + ( i, i+dé )               (tableau comme en python) (case de départ, casé d’arrivé) 
	return CP

def conditionsPhaseFinal() 
	tant que i ≤ 18 && echi[i] ≥ 1
		i=i+1
	if i ≥ 18 
		return 1
	return 0

def evaluation ( int C, camp=-1/+1, pionsRentrésIA, pionsRentrésJ ) 
	if echiVirtuel[C] = camp*(-1)  
		echiVirtuel[C] = camp
	for i in range (1, 25) //24 valeurs
		if echiVirtuel[i] < ou > 0 (dépend si joueur ou IA )
			if echi[i]/abs(echi[i]) = camp
				if camp = -1
					valeurEchiquier = valeurEchiquier + (25 - i*echi[i])
				else :	
					valeurEchiquier = valeurEchiquier + i*echi[i] 
	if camp == 1
		valeurEchiquier = valeurEchiquier + 30*pionRentrésJ
	else
		valeurEchiquier = valeurEchiquier + 30*pionRentrésIA

	//En gros plus on a de pion avancé et plus ils sont nombreux plus le score est élevé.		return valeurEchiquier	 
			
ConditionsVictoires(PiGa,camp)
		If PiGa == 15 :
			printf(«%i» &camp« gagne»)				

def coupJoueur(dé1, dé2, deJoue)
	CP1 = jouable2eme(de1)
	CP2 = jouable2eme(de2)
	
	if deJoue == 0
		CP = CP1 + CP2

	else
		if déjoué == dé1
			dé = d2
			CP = CP2
		else 
			dé = d1
			CP = CP1
		
	for i in CP 
		printf(«N°%i – Case départ  : %i  et case d’arrivé %i», i, CP[i][0], CP[i][1])	

	while true
		scanf(«Entrer le numéro du coup que vous voulez jouer »,&x)
		if 0 < x < i
			printf(« Coup validé »)
			return CP[x]
		printf(« Fonctionne pas, reessaye »)
				
1ERE FONCTION JOUABLE //////////////////
def Jouable(dé1, dé2)
	CP =[ ]
	if pion mort ≥ 1 
		i = 1
		a = Déplacement_possible(dé1,i)
		b = Déplacement_possible(dé2,i)
		if a == 1
			CP = CP + ( i, i+dé1 )                (case de départ, casé d’arrivé) 
		if b == 1
			CP = CP + ( i, i+dé2 )
	else : 

	for i in range (1,25) :            // 24valeurs
		if Echi[i+] > 0 :
			a = Déplacement_possible(dé1,i)
			b = Déplacement_possible(dé2,i)
			if a == 1
				CP = CP + ( i, i+dé1 )                (case de départ, casé d’arrivé) 
			if b == 1
				CP = CP + ( i, i+dé2 )		(tableau comme en python)
	return CP

//////////////////////////////
if dé1 == CJ[1] – CJ[0] :
	dé = dé2
else 
	dé = dé1
////////// jouable2eme(dé,CP)

int initial = tableau{24}
initial[1]=2
initial[6]=-5
initial[8]=-3
initial[12]=5
initial[13]=-5
initial[17]=3
initial[19]=5
initial[24]=-2

int pionsMortJoueur, pionsMortIA ;
int pionsGagneJoueur, pionsGagneIA ;
